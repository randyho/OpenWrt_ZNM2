#
# Copyright (c) 2022-2023 Curious <https://www.curious.host>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
# 
# https://github.com/Curious-r/OpenWrtBuildWorkflows
# Description: Automatically check OpenWrt source code update and build it. No additional keys are 
# required.
#
# Some features come from https://github.com/P3TERX/Actions-OpenWrt, visit the repository to get its 
# copyright information.
#-------------------------------------------------------------------------------------------------------

# Workflow name which is showed in GitHub Actions.
name: Build OpenWrt for X86

on:
  workflow_dispatch:
    inputs:
      force-build:
        description: "Build new firmware anyway"
        required: false
        default: "false"
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
# Uncomment the following to run regularly. Note that the cron expression here does not contain seconds.
#  schedule:
#    - cron: 0 12 * * *
  watch:
    types: started

env:
  REPO_URL: https://github.com/sdf8057/ipq6000.git
  # REPO_URL: https://github.com/KK2018gh/ipq6000-sdf8057.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ipq6000.config
  CUSTOM_SCRIPT_1: diy-part1_openwrt.sh
  CUSTOM_SCRIPT_2: diy-part2_openwrt.sh
  STORE_PRODUCTS: false
  STORE_FIRMWARE: true
  RELEASE_FIRMWARE: true
  TIME_ZONE: Asia/Shanghai

jobs:
  build:
    name: Build firmware
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
          sudo timedatectl set-timezone "$TIME_ZONE"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          
      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 --branch $REPO_BRANCH --single-branch $REPO_URL openwrt/
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Run custom-script-1
        run: |
          chmod +x $CUSTOM_SCRIPT_1
          cd openwrt/
          $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_1

      - name: Update feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files/ openwrt/files/
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
 
      - name: Run custom-script-2
        run: |
          chmod +x $CUSTOM_SCRIPT_2
          cd openwrt/
          $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_2

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@main
        if: github.event.inputs.ssh == 'true' || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download packages
        id: download-packages
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload all compilation products
        uses: actions/upload-artifact@v3
        if: steps.compile.outputs.status == 'success' && env.STORE_PRODUCTS == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin/

      - name: Organize firmware-related files
        id: organize-files
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@v3
        if: steps.organize-files.outputs.status == 'success' && env.STORE_FIRMWARE == 'true' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: env.RELEASE_FIRMWARE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "Build from $REPO_URL $REPO_BRANCH" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@master
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

  clean:
    name: Clean up old assets
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write

    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 2

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.RELEASE_FIRMWARE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
